In SQL, a trigger is a database object that is automatically executed or fired in response to certain events or actions performed on a table or view. Triggers are used to enforce business rules, maintain data integrity, and automate tasks within a database. 

Key components and aspects of triggers:

1. **Event**: Triggers are associated with specific events that occur on a table, such as INSERT, UPDATE, or DELETE operations.

2. **Timing**: Triggers can be executed either before or after the associated event occurs. 
   - **Before Trigger**: Fired before the execution of the triggering event, allowing modification of data before it is inserted, updated, or deleted.
   - **After Trigger**: Fired after the execution of the triggering event, typically used for auditing, logging, or enforcing constraints.

3. **Execution Context**: Triggers execute within the context of a transaction and have access to the old and new values affected by the triggering event.
   - **OLD**: Refers to the old values of the row affected by an UPDATE or DELETE operation.
   - **NEW**: Refers to the new values of the row affected by an INSERT or UPDATE operation.

4. **Statement-Level vs. Row-Level**: Triggers can be defined to fire once for each SQL statement (statement-level trigger) or for each affected row (row-level trigger).

5. **Actions**: Triggers can execute SQL statements, call stored procedures, raise errors, or perform other database operations based on the triggering event.

6. **Control Flow**: Triggers can contain conditional logic and control flow constructs to determine the actions to be taken based on specific conditions.

7. **Database Events**: In addition to table-level triggers, some database systems also support triggers for database-level events, such as database startup or shutdown.

USE SBIBANK;
CREATE TABLE MAIN_TABLE (
    STU_ID INT AUTO_INCREMENT PRIMARY KEY,
    STU_NAME VARCHAR(255),
    STU_COURSE VARCHAR(255),
    STU_FEES DECIMAL(10, 2),
    STU_CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    STU_UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE BACKUP_TABLE (
    STU_ID INT,
    STU_NAME VARCHAR(255),
    STU_COURSE VARCHAR(255),
    STU_FEES DECIMAL(10, 2),
    STU_CREATED_AT TIMESTAMP,
    STU_UPDATED_AT TIMESTAMP,
    STU_DELETED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- ---------------------------------- CREATE TRIGGER BEFORE_MAIN_TABLE_DELETE -----------------------------------------------

DELIMITER //

CREATE TRIGGER BEFORE_MAIN_TABLE_DELETE
BEFORE DELETE ON MAIN_TABLE
FOR EACH ROW
BEGIN
    INSERT INTO BACKUP_TABLE (STU_ID, STU_NAME, STU_COURSE, STU_FEES, STU_CREATED_AT, STU_UPDATED_AT)
    VALUES (OLD.STU_ID, OLD.STU_NAME, OLD.STU_COURSE, OLD.STU_FEES, OLD.STU_CREATED_AT, OLD.STU_UPDATED_AT);
END;
//
DELIMITER ;
-- -------------------------------------------------------------------------------------------


-- Insert data into main table
INSERT INTO MAIN_TABLE (STU_NAME, STU_COURSE, STU_FEES) VALUES 
('Bob', 'Mathematics', 15000.00);
INSERT INTO MAIN_TABLE (STU_NAME, STU_COURSE, STU_FEES) VALUES 
('Alice', 'Computer Science', 10000.00);
INSERT INTO MAIN_TABLE (STU_NAME, STU_COURSE, STU_FEES) VALUES 
('DEV', 'Mathematics', 15000.00);

SELECT * FROM MAIN_TABLE;
UPDATE MAIN_TABLE SET STU_FEES=23000 WHERE STU_NAME="DEV";
-- Delete a row from main table
DELETE FROM MAIN_TABLE ;
DELETE FROM BACKUP_TABLE ;

-- Check the backup table to see if the deleted row is there
SELECT * FROM BACKUP_TABLE;









