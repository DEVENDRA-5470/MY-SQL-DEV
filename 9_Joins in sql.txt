Joins in SQL are used to combine rows from two or more tables based on a related column between them. There are several types of joins, each serving a different purpose. Hereâ€™s an overview of the main types of joins:

### 1. INNER JOIN
Returns records that have matching values in both tables.
```sql
SELECT table1.column1, table2.column2
FROM table1
INNER JOIN table2
ON table1.common_column = table2.common_column;
```

### 2. LEFT JOIN (or LEFT OUTER JOIN)
Returns all records from the left table and the matched records from the right table. The result is NULL from the right side, if there is no match.
```sql
SELECT table1.column1, table2.column2
FROM table1
LEFT JOIN table2
ON table1.common_column = table2.common_column;
```

### 3. RIGHT JOIN (or RIGHT OUTER JOIN)
Returns all records from the right table and the matched records from the left table. The result is NULL from the left side, when there is no match.
```sql
SELECT table1.column1, table2.column2
FROM table1
RIGHT JOIN table2
ON table1.common_column = table2.common_column;
```

### 4. FULL OUTER JOIN
Returns all records when there is a match in either left or right table. Note: MySQL does not support FULL OUTER JOIN directly. You can achieve this with a UNION of LEFT JOIN and RIGHT JOIN.
```sql
SELECT table1.column1, table2.column2
FROM table1
LEFT JOIN table2
ON table1.common_column = table2.common_column
UNION
SELECT table1.column1, table2.column2
FROM table1
RIGHT JOIN table2
ON table1.common_column = table2.common_column;
```

### 5. CROSS JOIN
Returns the Cartesian product of the two tables, i.e., it returns all possible combinations of rows.
```sql
SELECT table1.column1, table2.column2
FROM table1
CROSS JOIN table2;
```

### 6. SELF JOIN
A self join is a regular join, but the table is joined with itself.
```sql
SELECT a.column1, b.column2
FROM table_name a, table_name b
WHERE a.common_column = b.common_column;
```

### Examples

Assume we have two tables, `employees` and `departments`:

**employees**
| emp_id | emp_name | dept_id |
|--------|----------|---------|
| 1      | John     | 101     |
| 2      | Jane     | 102     |
| 3      | Jack     | 101     |

**departments**
| dept_id | dept_name  |
|---------|------------|
| 101     | HR         |
| 102     | IT         |
| 103     | Marketing  |

#### INNER JOIN Example
```sql
SELECT employees.emp_name, departments.dept_name
FROM employees
INNER JOIN departments
ON employees.dept_id = departments.dept_id;
```
Result:
| emp_name | dept_name |
|----------|-----------|
| John     | HR        |
| Jack     | HR        |
| Jane     | IT        |

#### LEFT JOIN Example
```sql
SELECT employees.emp_name, departments.dept_name
FROM employees
LEFT JOIN departments
ON employees.dept_id = departments.dept_id;
```
Result:
| emp_name | dept_name |
|----------|-----------|
| John     | HR        |
| Jack     | HR        |
| Jane     | IT        |

#### RIGHT JOIN Example
```sql
SELECT employees.emp_name, departments.dept_name
FROM employees
RIGHT JOIN departments
ON employees.dept_id = departments.dept_id;
```
Result:
| emp_name | dept_name  |
|----------|------------|
| John     | HR         |
| Jack     | HR         |
| Jane     | IT         |
| NULL     | Marketing  |

These examples illustrate how different types of joins work and how they can be used to retrieve related data from multiple tables in SQL.